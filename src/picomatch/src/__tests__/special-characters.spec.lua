-- ROBLOX upstream: https://github.com/micromatch/picomatch/tree/2.3.1/test/special-characters.js

return function()
	local CurrentModule = script.Parent
	local PicomatchModule = CurrentModule.Parent
	local Packages = PicomatchModule.Parent

	local jestExpect = require(Packages.Dev.Expect)

	-- ROBLOX deviation START: not supported in Lua
	-- local path = require("path")

	local support = require(CurrentModule.support)
	local Picomatch = require(PicomatchModule)
	local isMatch, makeRe = Picomatch.isMatch, Picomatch.makeRe
	describe("special characters", function()
		beforeAll(function()
			return support.resetPathSep()
		end)
		afterAll(function()
			return support.resetPathSep()
		end)
		afterEach(function()
			return support.resetPathSep()
		end)

		describe("numbers", function()
			it("should match numbers in the input string", function()
				assert(not isMatch("1", "*/*"))
				assert(isMatch("1/1", "*/*"))
				assert(isMatch("1/2", "*/*"))
				assert(not isMatch("1/1/1", "*/*"))
				assert(not isMatch("1/1/2", "*/*"))
				assert(not isMatch("1", "*/*/1"))
				assert(not isMatch("1/1", "*/*/1"))
				assert(not isMatch("1/2", "*/*/1"))
				assert(isMatch("1/1/1", "*/*/1"))
				assert(not isMatch("1/1/2", "*/*/1"))
				assert(not isMatch("1", "*/*/2"))
				assert(not isMatch("1/1", "*/*/2"))
				assert(not isMatch("1/2", "*/*/2"))
				assert(not isMatch("1/1/1", "*/*/2"))
				assert(isMatch("1/1/2", "*/*/2"))
			end)
		end)

		describe("qmarks", function()
			it("should match literal ? in the input string", function()
				assert(isMatch("?", "*"))
				assert(isMatch("/?", "/*"))
				assert(isMatch("?/?", "*/*"))
				assert(isMatch("?/?/", "*/*/"))
				assert(isMatch("/?", "/?"))
				assert(isMatch("?/?", "?/?"))
				assert(isMatch("foo?/bar?", "*/*"))
			end)

			it("should not match slashes with qmarks", function()
				assert(not isMatch("aaa/bbb", "aaa?bbb"))
			end)

			it("should match literal ? with qmarks", function()
				assert(not isMatch("?", "??"))
				assert(not isMatch("?", "???"))
				assert(not isMatch("??", "?"))
				assert(not isMatch("??", "???"))
				assert(not isMatch("???", "?"))
				assert(not isMatch("???", "??"))
				assert(not isMatch("ac?", "ab?"))
				assert(isMatch("?", "?*"))
				assert(isMatch("??", "?*"))
				assert(isMatch("???", "?*"))
				assert(isMatch("????", "?*"))
				assert(isMatch("?", "?"))
				assert(isMatch("??", "??"))
				assert(isMatch("???", "???"))
				assert(isMatch("ab?", "ab?"))
			end)

			it("should match other non-slash characters with qmarks", function()
				assert(not isMatch("/a/", "?"))
				assert(not isMatch("/a/", "??"))
				assert(not isMatch("/a/", "???"))
				assert(not isMatch("/a/b/", "??"))
				assert(not isMatch("aaa/bbb", "aaa?bbb"))
				assert(not isMatch("aaa//bbb", "aaa?bbb"))
				assert(not isMatch("aaa\\\\bbb", "aaa?bbb"))
				assert(isMatch("acb/", "a?b/"))
				assert(isMatch("acdb/", "a??b/"))
				assert(isMatch("/acb", "/a?b"))
			end)

			it("should match non-slash characters when ? is escaped", function()
				assert(not isMatch("acb/", "a\\?b/"))
				assert(not isMatch("acdb/", "a\\?\\?b/"))
				assert(not isMatch("/acb", "/a\\?b"))
			end)

			it("should match one character per question mark", function()
				assert(isMatch("a", "?"))
				assert(not isMatch("aa", "?"))
				assert(not isMatch("ab", "?"))
				assert(not isMatch("aaa", "?"))
				assert(not isMatch("abcdefg", "?"))
				assert(not isMatch("a", "??"))
				assert(isMatch("aa", "??"))
				assert(isMatch("ab", "??"))
				assert(not isMatch("aaa", "??"))
				assert(not isMatch("abcdefg", "??"))
				assert(not isMatch("a", "???"))
				assert(not isMatch("aa", "???"))
				assert(not isMatch("ab", "???"))
				assert(isMatch("aaa", "???"))
				assert(not isMatch("abcdefg", "???"))
				assert(not isMatch("aaa", "a?c"))
				assert(isMatch("aac", "a?c"))
				assert(isMatch("abc", "a?c"))
				assert(not isMatch("a", "ab?"))
				assert(not isMatch("aa", "ab?"))
				assert(not isMatch("ab", "ab?"))
				assert(not isMatch("ac", "ab?"))
				assert(not isMatch("abcd", "ab?"))
				assert(not isMatch("abbb", "ab?"))
				assert(isMatch("acb", "a?b"))
				assert(not isMatch("a/bb/c/dd/e.md", "a/?/c/?/e.md"))
				assert(isMatch("a/bb/c/dd/e.md", "a/??/c/??/e.md"))
				assert(not isMatch("a/bbb/c.md", "a/??/c.md"))
				assert(isMatch("a/b/c.md", "a/?/c.md"))
				assert(isMatch("a/b/c/d/e.md", "a/?/c/?/e.md"))
				assert(not isMatch("a/b/c/d/e.md", "a/?/c/???/e.md"))
				assert(isMatch("a/b/c/zzz/e.md", "a/?/c/???/e.md"))
				assert(not isMatch("a/bb/c.md", "a/?/c.md"))
				assert(isMatch("a/bb/c.md", "a/??/c.md"))
				assert(isMatch("a/bbb/c.md", "a/???/c.md"))
				assert(isMatch("a/bbbb/c.md", "a/????/c.md"))
			end)

			it("should enforce one character per qmark even when preceded by stars", function()
				assert(not isMatch("a", "*??"))
				assert(not isMatch("aa", "*???"))
				assert(isMatch("aaa", "*???"))
				assert(not isMatch("a", "*****??"))
				assert(not isMatch("aa", "*****???"))
				assert(isMatch("aaa", "*****???"))
			end)

			it("should support qmarks and stars", function()
				assert(not isMatch("aaa", "a*?c"))
				assert(isMatch("aac", "a*?c"))
				assert(isMatch("abc", "a*?c"))
				assert(isMatch("abc", "a**?c"))
				assert(not isMatch("abb", "a**?c"))
				assert(isMatch("acc", "a**?c"))
				assert(isMatch("abc", "a*****?c"))
				assert(isMatch("a", "*****?"))
				assert(isMatch("aa", "*****?"))
				assert(isMatch("abc", "*****?"))
				assert(isMatch("zzz", "*****?"))
				assert(isMatch("bbb", "*****?"))
				assert(isMatch("aaaa", "*****?"))
				assert(not isMatch("a", "*****??"))
				assert(isMatch("aa", "*****??"))
				assert(isMatch("abc", "*****??"))
				assert(isMatch("zzz", "*****??"))
				assert(isMatch("bbb", "*****??"))
				assert(isMatch("aaaa", "*****??"))
				assert(not isMatch("a", "?*****??"))
				assert(not isMatch("aa", "?*****??"))
				assert(isMatch("abc", "?*****??"))
				assert(isMatch("zzz", "?*****??"))
				assert(isMatch("bbb", "?*****??"))
				assert(isMatch("aaaa", "?*****??"))
				assert(isMatch("abc", "?*****?c"))
				assert(not isMatch("abb", "?*****?c"))
				assert(not isMatch("zzz", "?*****?c"))
				assert(isMatch("abc", "?***?****c"))
				assert(not isMatch("bbb", "?***?****c"))
				assert(not isMatch("zzz", "?***?****c"))
				assert(isMatch("abc", "?***?****?"))
				assert(isMatch("bbb", "?***?****?"))
				assert(isMatch("zzz", "?***?****?"))
				assert(isMatch("abc", "?***?****"))
				assert(isMatch("abc", "*******c"))
				assert(isMatch("abc", "*******?"))
				assert(isMatch("abcdecdhjk", "a*cd**?**??k"))
				assert(isMatch("abcdecdhjk", "a**?**cd**?**??k"))
				assert(isMatch("abcdecdhjk", "a**?**cd**?**??k***"))
				assert(isMatch("abcdecdhjk", "a**?**cd**?**??***k"))
				assert(isMatch("abcdecdhjk", "a**?**cd**?**??***k**"))
				assert(isMatch("abcdecdhjk", "a****c**?**??*****"))
			end)

			it("should support qmarks, stars and slashes", function()
				assert(not isMatch("a/b/c/d/e.md", "a/?/c/?/*/e.md"))
				assert(isMatch("a/b/c/d/e/e.md", "a/?/c/?/*/e.md"))
				assert(isMatch("a/b/c/d/efghijk/e.md", "a/?/c/?/*/e.md"))
				assert(isMatch("a/b/c/d/efghijk/e.md", "a/?/**/e.md"))
				assert(not isMatch("a/bb/e.md", "a/?/e.md"))
				assert(isMatch("a/bb/e.md", "a/??/e.md"))
				assert(not isMatch("a/bb/e.md", "a/?/**/e.md"))
				assert(isMatch("a/b/ccc/e.md", "a/?/**/e.md"))
				assert(isMatch("a/b/c/d/efghijk/e.md", "a/*/?/**/e.md"))
				assert(isMatch("a/b/c/d/efgh.ijk/e.md", "a/*/?/**/e.md"))
				assert(isMatch("a/b.bb/c/d/efgh.ijk/e.md", "a/*/?/**/e.md"))
				assert(isMatch("a/bbb/c/d/efgh.ijk/e.md", "a/*/?/**/e.md"))
			end)

			it("should match non-leading dots", function()
				assert(isMatch("aaa.bbb", "aaa?bbb"))
			end)

			it("should not match leading dots", function()
				assert(not isMatch(".aaa/bbb", "?aaa/bbb"))
				assert(not isMatch("aaa/.bbb", "aaa/?bbb"))
			end)

			it("should match characters preceding a dot", function()
				assert(isMatch("a/bbb/abcd.md", "a/*/ab??.md"))
				assert(isMatch("a/bbb/abcd.md", "a/bbb/ab??.md"))
				assert(isMatch("a/bbb/abcd.md", "a/bbb/ab???md"))
			end)
		end)

		describe("parentheses ()", function()
			it("should match literal parentheses in the input string", function()
				assert(not isMatch("my/folder (Work, Accts)", "/*"))
				assert(isMatch("my/folder (Work, Accts)", "*/*"))
				assert(isMatch("my/folder (Work, Accts)", "*/*,*"))
				assert(isMatch("my/folder (Work, Accts)", "*/*(W*, *)*"))
				assert(isMatch("my/folder/(Work, Accts)", "**/*(W*, *)*"))
				assert(not isMatch("my/folder/(Work, Accts)", "*/*(W*, *)*"))
				assert(isMatch("foo(bar)baz", "foo*baz"))
			end)

			itFIXME("should match literal parens with brackets", function()
				assert(isMatch("foo(bar)baz", "foo[bar()]+baz"))
			end)

			it("should throw an error on imbalanced, unescaped parens", function()
				local opts = { strictBrackets = true }
				jestExpect(function()
					return makeRe("*)", opts)
				end).toThrowError('Missing opening: "("')
				jestExpect(function()
					return makeRe("*(", opts)
				end).toThrowError('Missing closing: ")"')
			end)

			it("should throw an error on imbalanced, unescaped brackets", function()
				local opts = { strictBrackets = true }
				jestExpect(function()
					return makeRe("*]", opts)
				end).toThrowError('Missing opening: "["')
				jestExpect(function()
					return makeRe("*[", opts)
				end).toThrowError('Missing closing: "]"')
			end)
		end)

		describe("path characters", function()
			it("should match windows drives with globstars", function()
				assert(isMatch("bar/", "**"))
				assert(isMatch("A://", "**"))
				assert(isMatch("B:foo/a/b/c/d", "**"))
				assert(isMatch("C:/Users/", "**"))
				assert(isMatch("c:\\", "**"))
				assert(isMatch("C:\\Users\\", "**"))
				assert(isMatch("C:cwd/another", "**"))
				assert(isMatch("C:cwd\\another", "**"))
			end)
			-- ROBLOX deviation START: not supported in Lua
			itSKIP("should not match multiple windows directories with a single star", function()
				-- path.sep = "\\"
				-- assert(isMatch("c:\\", "*{,/}"))
				-- assert(not isMatch("C:\\Users\\", "*"))
				-- assert(not isMatch("C:cwd\\another", "*"))
				-- path.sep = "/"
			end)
			itSKIP("should match mixed slashes on windows", function()
				-- path.sep = "\\"
				-- assert(isMatch("//C://user\\docs\\Letter.txt", "**"))
				-- assert(isMatch("//C:\\\\user/docs/Letter.txt", "**"))
				-- assert(isMatch(":\\", "*{,/}"))
				-- assert(isMatch(":\\", ":*{,/}"))
				-- assert(isMatch("\\\\foo/bar", "**"))
				-- assert(isMatch("\\\\foo/bar", "//*/*"))
				-- assert(isMatch("\\\\unc\\admin$", "**"))
				-- assert(isMatch("\\\\unc\\admin$", "//*/*$"))
				-- assert(isMatch("\\\\unc\\admin$\\system32", "//*/*$/*32"))
				-- assert(isMatch("\\\\unc\\share\\foo", "//u*/s*/f*"))
				-- assert(isMatch("foo\\bar\\baz", "f*/*/*"))
				-- path.sep = "/"
			end)
			-- ROBLOX deviation END
			itFIXME("should match mixed slashes when options.windows is true", function()
				assert(isMatch("//C://user\\docs\\Letter.txt", "**", { windows = true }))
				assert(isMatch("//C:\\\\user/docs/Letter.txt", "**", { windows = true }))
				assert(isMatch(":\\", "*{,/}", { windows = true }))
				assert(isMatch(":\\", ":*{,/}", { windows = true }))
				assert(isMatch("\\\\foo/bar", "**", { windows = true }))
				assert(isMatch("\\\\foo/bar", "//*/*", { windows = true }))
				assert(isMatch("\\\\unc\\admin$", "//**", { windows = true }))
				assert(isMatch("\\\\unc\\admin$", "//*/*$", { windows = true }))
				assert(isMatch("\\\\unc\\admin$\\system32", "//*/*$/*32", { windows = true }))
				assert(isMatch("\\\\unc\\share\\foo", "//u*/s*/f*", { windows = true }))
				assert(isMatch("\\\\\\\\\\\\unc\\share\\foo", "/\\{1,\\}u*/s*/f*", { windows = true, unescape = true }))
				assert(isMatch("foo\\bar\\baz", "f*/*/*", { windows = true }))
				assert(isMatch("//*:/**", "**"))
				assert(not isMatch("//server/file", "//*"))
				assert(isMatch("//server/file", "/**"))
				assert(isMatch("//server/file", "//**"))
				assert(isMatch("//server/file", "**"))
				assert(isMatch("//UNC//Server01//user//docs//Letter.txt", "**"))
				assert(isMatch("/foo", "**"))
				assert(isMatch("/foo/a/b/c/d", "**"))
				assert(isMatch("/foo/bar", "**"))
				assert(isMatch("/home/foo", "**"))
				assert(isMatch("/home/foo/..", "**/.."))
				assert(isMatch("/user/docs/Letter.txt", "**"))
				assert(isMatch("directory\\directory", "**"))
				assert(isMatch("a/b/c.js", "**"))
				assert(isMatch("directory/directory", "**"))
				assert(isMatch("foo/bar", "**"))
			end)

			it("should match any character zero or more times, except for /", function()
				assert(not isMatch("foo", "*a*"))
				assert(not isMatch("foo", "*r"))
				assert(not isMatch("foo", "b*"))
				assert(not isMatch("foo/bar", "*"))
				assert(isMatch("foo/bar", "*/*"))
				assert(not isMatch("foo/bar/baz", "*/*"))
				assert(isMatch("bar", "*a*"))
				assert(isMatch("bar", "*r"))
				assert(isMatch("bar", "b*"))
				assert(isMatch("foo/bar/baz", "*/*/*"))
			end)

			it("should match dashes surrounded by spaces", function()
				assert(isMatch("my/folder - 1", "*/*"))
				assert(isMatch("my/folder - copy (1)", "*/*"))
				assert(isMatch("my/folder - copy [1]", "*/*"))
				assert(isMatch("my/folder - foo + bar - copy [1]", "*/*"))
				assert(not isMatch("my/folder - foo + bar - copy [1]", "*"))
				assert(isMatch("my/folder - 1", "*/*-*"))
				assert(isMatch("my/folder - copy (1)", "*/*-*"))
				assert(isMatch("my/folder - copy [1]", "*/*-*"))
				assert(isMatch("my/folder - foo + bar - copy [1]", "*/*-*"))
				assert(isMatch("my/folder - 1", "*/*1"))
				assert(not isMatch("my/folder - copy (1)", "*/*1"))
			end)
		end)

		describe("brackets", function()
			itFIXME("should support square brackets in globs", function()
				assert(isMatch("foo/bar - 1", "**/*[1]"))
				assert(not isMatch("foo/bar - copy (1)", "**/*[1]"))
				assert(not isMatch("foo/bar (1)", "**/*[1]"))
				assert(not isMatch("foo/bar (4)", "**/*[1]"))
				assert(not isMatch("foo/bar (7)", "**/*[1]"))
				assert(not isMatch("foo/bar (42)", "**/*[1]"))
				assert(isMatch("foo/bar - copy [1]", "**/*[1]"))
				assert(isMatch("foo/bar - foo + bar - copy [1]", "**/*[1]"))
			end)

			it("should match (escaped) bracket literals", function()
				assert(isMatch("a [b]", "a \\[b\\]"))
				assert(isMatch("a [b] c", "a [b] c"))
				assert(isMatch("a [b]", "a \\[b\\]*"))
				assert(isMatch("a [bc]", "a \\[bc\\]*"))
				assert(not isMatch("a [b]", "a \\[b\\].*"))
				assert(isMatch("a [b].js", "a \\[b\\].*"))
				assert(not isMatch("foo/bar - 1", "**/*\\[*\\]"))
				assert(not isMatch("foo/bar - copy (1)", "**/*\\[*\\]"))
				assert(not isMatch("foo/bar (1)", "**/*\\[*\\]"))
				assert(not isMatch("foo/bar (4)", "**/*\\[*\\]"))
				assert(not isMatch("foo/bar (7)", "**/*\\[*\\]"))
				assert(not isMatch("foo/bar (42)", "**/*\\[*\\]"))
				assert(isMatch("foo/bar - copy [1]", "**/*\\[*\\]"))
				assert(isMatch("foo/bar - foo + bar - copy [1]", "**/*\\[*\\]"))
				assert(not isMatch("foo/bar - 1", "**/*\\[1\\]"))
				assert(not isMatch("foo/bar - copy (1)", "**/*\\[1\\]"))
				assert(not isMatch("foo/bar (1)", "**/*\\[1\\]"))
				assert(not isMatch("foo/bar (4)", "**/*\\[1\\]"))
				assert(not isMatch("foo/bar (7)", "**/*\\[1\\]"))
				assert(not isMatch("foo/bar (42)", "**/*\\[1\\]"))
				assert(isMatch("foo/bar - copy [1]", "**/*\\[1\\]"))
				assert(isMatch("foo/bar - foo + bar - copy [1]", "**/*\\[1\\]"))
				assert(not isMatch("foo/bar - 1", "*/*\\[*\\]"))
				assert(not isMatch("foo/bar - copy (1)", "*/*\\[*\\]"))
				assert(not isMatch("foo/bar (1)", "*/*\\[*\\]"))
				assert(not isMatch("foo/bar (4)", "*/*\\[*\\]"))
				assert(not isMatch("foo/bar (7)", "*/*\\[*\\]"))
				assert(not isMatch("foo/bar (42)", "*/*\\[*\\]"))
				assert(isMatch("foo/bar - copy [1]", "*/*\\[*\\]"))
				assert(isMatch("foo/bar - foo + bar - copy [1]", "*/*\\[*\\]"))
				assert(isMatch("a [b]", "a \\[b\\]"))
				assert(isMatch("a [b] c", "a [b] c"))
				assert(isMatch("a [b]", "a \\[b\\]*"))
				assert(isMatch("a [bc]", "a \\[bc\\]*"))
				assert(not isMatch("a [b]", "a \\[b\\].*"))
				assert(isMatch("a [b].js", "a \\[b\\].*"))
			end)
		end)

		describe('star - "*"', function()
			it("should match literal *", function()
				assert(isMatch("*", "*"))
				assert(isMatch("*/*", "*/*"))
				assert(isMatch("*/*", "?/?"))
				assert(isMatch("*/*/", "*/*/"))
				assert(isMatch("/*", "/*"))
				assert(isMatch("/*", "/?"))
				assert(isMatch("foo*/bar*", "*/*"))
			end)

			itFIXME("should support stars following brackets", function()
				assert(isMatch("a", "[a]*"))
				assert(isMatch("aa", "[a]*"))
				assert(isMatch("aaa", "[a]*"))
				assert(isMatch("az", "[a-z]*"))
				assert(isMatch("zzz", "[a-z]*"))
			end)

			it("should support stars following parens", function()
				assert(isMatch("a", "(a)*"))
				assert(isMatch("ab", "(a|b)*"))
				assert(isMatch("aa", "(a)*"))
				assert(isMatch("aaab", "(a|b)*"))
				assert(isMatch("aaabbb", "(a|b)*"))
			end)

			it("should not match slashes with single stars", function()
				assert(not isMatch("a/b", "(a)*"))
				assert(not isMatch("a/b", "[a]*"))
				assert(not isMatch("a/b", "a*"))
				assert(not isMatch("a/b", "(a|b)*"))
			end)

			it("should not match dots with stars by default", function()
				assert(not isMatch(".a", "(a)*"))
				assert(not isMatch(".a", "*[a]*"))
				assert(not isMatch(".a", "*[a]"))
				assert(not isMatch(".a", "*a*"))
				assert(not isMatch(".a", "*a"))
				assert(not isMatch(".a", "*(a|b)"))
			end)
		end)

		describe('plus - "+"', function()
			it("should match literal +", function()
				assert(isMatch("+", "*"))
				assert(isMatch("/+", "/*"))
				assert(isMatch("+/+", "*/*"))
				assert(isMatch("+/+/", "*/*/"))
				assert(isMatch("/+", "/+"))
				assert(isMatch("/+", "/?"))
				assert(isMatch("+/+", "?/?"))
				assert(isMatch("+/+", "+/+"))
				assert(isMatch("foo+/bar+", "*/*"))
			end)

			itFIXME("should support plus signs that follow brackets (and not escape them)", function()
				assert(isMatch("a", "[a]+"))
				assert(isMatch("aa", "[a]+"))
				assert(isMatch("aaa", "[a]+"))
				assert(isMatch("az", "[a-z]+"))
				assert(isMatch("zzz", "[a-z]+"))
			end)

			it("should not escape plus signs that follow parens", function()
				assert(isMatch("a", "(a)+"))
				assert(isMatch("ab", "(a|b)+"))
				assert(isMatch("aa", "(a)+"))
				assert(isMatch("aaab", "(a|b)+"))
				assert(isMatch("aaabbb", "(a|b)+"))
			end)

			it("should escape plus signs to match string literals", function()
				assert(isMatch("a+b/src/glimini.js", "a+b/src/*.js"))
				assert(isMatch("+b/src/glimini.js", "+b/src/*.js"))
				assert(isMatch("coffee+/src/glimini.js", "coffee+/src/*.js"))
				assert(isMatch("coffee+/src/glimini.js", "coffee+/src/*.js"))
				assert(isMatch("coffee+/src/glimini.js", "coffee+/src/*"))
			end)

			itFIXME("should not escape + following brackets", function()
				assert(isMatch("a", "[a]+"))
				assert(isMatch("aa", "[a]+"))
				assert(isMatch("aaa", "[a]+"))
				assert(isMatch("az", "[a-z]+"))
				assert(isMatch("zzz", "[a-z]+"))
			end)

			it("should not escape + following parens", function()
				assert(isMatch("a", "(a)+"))
				assert(isMatch("ab", "(a|b)+"))
				assert(isMatch("aa", "(a)+"))
				assert(isMatch("aaab", "(a|b)+"))
				assert(isMatch("aaabbb", "(a|b)+"))
			end)
		end)

		describe("dollar $", function()
			it("should match dollar signs", function()
				assert(not isMatch("$", "!($)"))
				assert(not isMatch("$", "!$"))
				assert(isMatch("$$", "!$"))
				assert(isMatch("$$", "!($)"))
				assert(isMatch("$$$", "!($)"))
				assert(isMatch("^", "!($)"))
				assert(isMatch("$", "!($$)"))
				assert(not isMatch("$$", "!($$)"))
				assert(isMatch("$$$", "!($$)"))
				assert(isMatch("^", "!($$)"))
				assert(not isMatch("$", "!($*)"))
				assert(not isMatch("$$", "!($*)"))
				assert(not isMatch("$$$", "!($*)"))
				assert(isMatch("^", "!($*)"))
				assert(isMatch("$", "*"))
				assert(isMatch("$$", "*"))
				assert(isMatch("$$$", "*"))
				assert(isMatch("^", "*"))
				assert(isMatch("$", "$*"))
				assert(isMatch("$$", "$*"))
				assert(isMatch("$$$", "$*"))
				assert(not isMatch("^", "$*"))
				assert(isMatch("$", "*$*"))
				assert(isMatch("$$", "*$*"))
				assert(isMatch("$$$", "*$*"))
				assert(not isMatch("^", "*$*"))
				assert(isMatch("$", "*$"))
				assert(isMatch("$$", "*$"))
				assert(isMatch("$$$", "*$"))
				assert(not isMatch("^", "*$"))
				assert(not isMatch("$", "?$"))
				assert(isMatch("$$", "?$"))
				assert(not isMatch("$$$", "?$"))
				assert(not isMatch("^", "?$"))
			end)
		end)

		describe("caret ^", function()
			it("should match carets", function()
				assert(isMatch("^", "^"))
				assert(isMatch("^/foo", "^/*"))
				assert(isMatch("^/foo", "^/*"))
				assert(isMatch("foo^", "*^"))
				assert(isMatch("^foo/foo", "^foo/*"))
				assert(isMatch("foo^/foo", "foo^/*"))
				assert(not isMatch("^", "!(^)"))
				assert(isMatch("^^", "!(^)"))
				assert(isMatch("^^^", "!(^)"))
				assert(isMatch("&", "!(^)"))
				assert(isMatch("^", "!(^^)"))
				assert(not isMatch("^^", "!(^^)"))
				assert(isMatch("^^^", "!(^^)"))
				assert(isMatch("&", "!(^^)"))
				assert(not isMatch("^", "!(^*)"))
				assert(not isMatch("^^", "!(^*)"))
				assert(not isMatch("^^^", "!(^*)"))
				assert(isMatch("&", "!(^*)"))
				assert(isMatch("^", "*"))
				assert(isMatch("^^", "*"))
				assert(isMatch("^^^", "*"))
				assert(isMatch("&", "*"))
				assert(isMatch("^", "^*"))
				assert(isMatch("^^", "^*"))
				assert(isMatch("^^^", "^*"))
				assert(not isMatch("&", "^*"))
				assert(isMatch("^", "*^*"))
				assert(isMatch("^^", "*^*"))
				assert(isMatch("^^^", "*^*"))
				assert(not isMatch("&", "*^*"))
				assert(isMatch("^", "*^"))
				assert(isMatch("^^", "*^"))
				assert(isMatch("^^^", "*^"))
				assert(not isMatch("&", "*^"))
				assert(not isMatch("^", "?^"))
				assert(isMatch("^^", "?^"))
				assert(not isMatch("^^^", "?^"))
				assert(not isMatch("&", "?^"))
			end)
		end)

		describe("mixed special characters", function()
			it("should match special characters in paths", function()
				assert(isMatch("my/folder +1", "*/*"))
				assert(isMatch("my/folder -1", "*/*"))
				assert(isMatch("my/folder *1", "*/*"))
				assert(isMatch("my/folder", "*/*"))
				assert(isMatch("my/folder+foo+bar&baz", "*/*"))
				assert(isMatch("my/folder - $1.00", "*/*"))
				assert(isMatch("my/folder - ^1.00", "*/*"))
				assert(isMatch("my/folder - %1.00", "*/*"))
				assert(isMatch("my/folder +1", "*/!(*%)*"))
				assert(isMatch("my/folder -1", "*/!(*%)*"))
				assert(isMatch("my/folder *1", "*/!(*%)*"))
				assert(isMatch("my/folder", "*/!(*%)*"))
				assert(isMatch("my/folder+foo+bar&baz", "*/!(*%)*"))
				assert(isMatch("my/folder - $1.00", "*/!(*%)*"))
				assert(isMatch("my/folder - ^1.00", "*/!(*%)*"))
				assert(not isMatch("my/folder - %1.00", "*/!(*%)*"))
				assert(not isMatch("my/folder +1", "*/*$*"))
				assert(not isMatch("my/folder -1", "*/*$*"))
				assert(not isMatch("my/folder *1", "*/*$*"))
				assert(not isMatch("my/folder", "*/*$*"))
				assert(not isMatch("my/folder+foo+bar&baz", "*/*$*"))
				assert(isMatch("my/folder - $1.00", "*/*$*"))
				assert(not isMatch("my/folder - ^1.00", "*/*$*"))
				assert(not isMatch("my/folder - %1.00", "*/*$*"))
				assert(not isMatch("my/folder +1", "*/*^*"))
				assert(not isMatch("my/folder -1", "*/*^*"))
				assert(not isMatch("my/folder *1", "*/*^*"))
				assert(not isMatch("my/folder", "*/*^*"))
				assert(not isMatch("my/folder+foo+bar&baz", "*/*^*"))
				assert(not isMatch("my/folder - $1.00", "*/*^*"))
				assert(isMatch("my/folder - ^1.00", "*/*^*"))
				assert(not isMatch("my/folder - %1.00", "*/*^*"))
				assert(not isMatch("my/folder +1", "*/*&*"))
				assert(not isMatch("my/folder -1", "*/*&*"))
				assert(not isMatch("my/folder *1", "*/*&*"))
				assert(not isMatch("my/folder", "*/*&*"))
				assert(isMatch("my/folder+foo+bar&baz", "*/*&*"))
				assert(not isMatch("my/folder - $1.00", "*/*&*"))
				assert(not isMatch("my/folder - ^1.00", "*/*&*"))
				assert(not isMatch("my/folder - %1.00", "*/*&*"))
				assert(isMatch("my/folder +1", "*/*+*"))
				assert(not isMatch("my/folder -1", "*/*+*"))
				assert(not isMatch("my/folder *1", "*/*+*"))
				assert(not isMatch("my/folder", "*/*+*"))
				assert(isMatch("my/folder+foo+bar&baz", "*/*+*"))
				assert(not isMatch("my/folder - $1.00", "*/*+*"))
				assert(not isMatch("my/folder - ^1.00", "*/*+*"))
				assert(not isMatch("my/folder - %1.00", "*/*+*"))
				assert(not isMatch("my/folder +1", "*/*-*"))
				assert(isMatch("my/folder -1", "*/*-*"))
				assert(not isMatch("my/folder *1", "*/*-*"))
				assert(not isMatch("my/folder", "*/*-*"))
				assert(not isMatch("my/folder+foo+bar&baz", "*/*-*"))
				assert(isMatch("my/folder - $1.00", "*/*-*"))
				assert(isMatch("my/folder - ^1.00", "*/*-*"))
				assert(isMatch("my/folder - %1.00", "*/*-*"))
				assert(not isMatch("my/folder +1", "*/*\\**"))
				assert(not isMatch("my/folder -1", "*/*\\**"))
				assert(isMatch("my/folder *1", "*/*\\**"))
				assert(not isMatch("my/folder", "*/*\\**"))
				assert(not isMatch("my/folder+foo+bar&baz", "*/*\\**"))
				assert(not isMatch("my/folder - $1.00", "*/*\\**"))
				assert(not isMatch("my/folder - ^1.00", "*/*\\**"))
				assert(not isMatch("my/folder - %1.00", "*/*\\**"))
			end)
		end)
	end)
end
