-- ROBLOX upstream: https://github.com/micromatch/picomatch/tree/2.3.1/test/dotfiles.js

return function()
	local CurrentModule = script.Parent
	local PicomatchModule = CurrentModule.Parent
	local Packages = PicomatchModule.Parent

	local jestExpect = require(Packages.Dev.Expect)

	local Promise = require(Packages.Promise)

	local match = require(CurrentModule.support.match)
	local isMatch = require(PicomatchModule).isMatch
	describe("dotfiles", function()
		describe("normal", function()
			itFIXME("should not match dotfiles by default:", function()
				jestExpect(match({ ".dotfile" }, "*")).toEqual({})
				jestExpect(match({ ".dotfile" }, "**")).toEqual({})
				jestExpect(match({ "a/b/c/.dotfile.md" }, "*.md")).toEqual({})
				jestExpect(match({ "a/b", "a/.b", ".a/b", ".a/.b" }, "**")).toEqual({ "a/b" })
				jestExpect(match({ "a/b/c/.dotfile" }, "*.*")).toEqual({})
			end)
		end)

		describe("leading dot", function()
			itFIXME("should match dotfiles when a leading dot is defined in the path:", function()
				jestExpect(match({ "a/b/c/.dotfile.md" }, "**/.*")).toEqual({ "a/b/c/.dotfile.md" })
				jestExpect(match({ "a/b/c/.dotfile.md" }, "**/.*.md")).toEqual({ "a/b/c/.dotfile.md" })
			end)

			itFIXME("should use negation patterns on dotfiles:", function()
				jestExpect(match({ ".a", ".b", "c", "c.md" }, "!.*")).toEqual({ "c", "c.md" })
				jestExpect(match({ ".a", ".b", "c", "c.md" }, "!.b")).toEqual({ ".a", "c", "c.md" })
			end)

			itFIXME("should match dotfiles when there is a leading dot:", function()
				local opts = { dot = true }
				jestExpect(match({ ".dotfile" }, "*", opts)).toEqual({ ".dotfile" })
				jestExpect(match({ ".dotfile" }, "**", opts)).toEqual({ ".dotfile" })
				jestExpect(match({ "a/b", "a/.b", ".a/b", ".a/.b" }, "**", opts)).toEqual({
					"a/b",
					"a/.b",
					".a/b",
					".a/.b",
				})
				jestExpect(match({ "a/b", "a/.b", "a/.b", ".a/.b" }, "a/{.*,**}", opts)).toEqual({ "a/b", "a/.b" })
				jestExpect(match({ "a/b", "a/.b", "a/.b", ".a/.b" }, "{.*,**}", {})).toEqual({ "a/b" })
				jestExpect(match({ "a/b", "a/.b", "a/.b", ".a/.b" }, "{.*,**}", opts)).toEqual({
					"a/b",
					"a/.b",
					".a/.b",
				})
				jestExpect(match({ ".dotfile" }, ".dotfile", opts)).toEqual({ ".dotfile" })
				jestExpect(match({ ".dotfile.md" }, ".*.md", opts)).toEqual({ ".dotfile.md" })
			end)

			itFIXME("should match dotfiles when there is not a leading dot:", function()
				local opts = { dot = true }
				jestExpect(match({ ".dotfile" }, "*.*", opts)).toEqual({ ".dotfile" })
				jestExpect(match({ ".a", ".b", "c", "c.md" }, "*.*", opts)).toEqual({ ".a", ".b", "c.md" })
				jestExpect(match({ ".dotfile" }, "*.md", opts)).toEqual({})
				jestExpect(match({ ".verb.txt" }, "*.md", opts)).toEqual({})
				jestExpect(match({ "a/b/c/.dotfile" }, "*.md", opts)).toEqual({})
				jestExpect(match({ "a/b/c/.dotfile.md" }, "*.md", opts)).toEqual({})
				jestExpect(match({ "a/b/c/.verb.md" }, "**/*.md", opts)).toEqual({ "a/b/c/.verb.md" })
				jestExpect(match({ "foo.md" }, "*.md", opts)).toEqual({ "foo.md" })
			end)

			itFIXME("should use negation patterns on dotfiles_:", function()
				jestExpect(match({ ".a", ".b", "c", "c.md" }, "!.*")).toEqual({ "c", "c.md" })
				jestExpect(match({ ".a", ".b", "c", "c.md" }, "!(.*)")).toEqual({ "c", "c.md" })
				jestExpect(match({ ".a", ".b", "c", "c.md" }, "!(.*)*")).toEqual({ "c", "c.md" })
				jestExpect(match({ ".a", ".b", "c", "c.md" }, "!*.*")).toEqual({ ".a", ".b", "c" })
			end)
		end)

		describe("options.dot", function()
			itFIXME("should match dotfiles when `options.dot` is true:", function()
				local fixtures = { "a/./b", "a/../b", "a/c/b", "a/.d/b" }
				jestExpect(match({ ".dotfile" }, "*.*", { dot = true })).toEqual({ ".dotfile" })
				jestExpect(match({ ".dotfile" }, "*.md", { dot = true })).toEqual({})
				jestExpect(match({ ".dotfile" }, ".dotfile", { dot = true })).toEqual({ ".dotfile" })
				jestExpect(match({ ".dotfile.md" }, ".*.md", { dot = true })).toEqual({ ".dotfile.md" })
				jestExpect(match({ ".verb.txt" }, "*.md", { dot = true })).toEqual({})
				jestExpect(match({ ".verb.txt" }, "*.md", { dot = true })).toEqual({})
				jestExpect(match({ "a/b/c/.dotfile" }, "*.md", { dot = true })).toEqual({})
				jestExpect(match({ "a/b/c/.dotfile.md" }, "**/*.md", { dot = true })).toEqual({ "a/b/c/.dotfile.md" })
				jestExpect(match({ "a/b/c/.dotfile.md" }, "**/.*", { dot = false })).toEqual({ "a/b/c/.dotfile.md" })
				jestExpect(match({ "a/b/c/.dotfile.md" }, "**/.*.md", { dot = false })).toEqual({
					"a/b/c/.dotfile.md",
				})
				jestExpect(match({ "a/b/c/.dotfile.md" }, "*.md", { dot = false })).toEqual({})
				jestExpect(match({ "a/b/c/.dotfile.md" }, "*.md", { dot = true })).toEqual({})
				jestExpect(match({ "a/b/c/.verb.md" }, "**/*.md", { dot = true })).toEqual({ "a/b/c/.verb.md" })
				jestExpect(match({ "d.md" }, "*.md", { dot = true })).toEqual({ "d.md" })
				jestExpect(match(fixtures, "a/*/b", { dot = true })).toEqual({ "a/c/b", "a/.d/b" })
				jestExpect(match(fixtures, "a/.*/b")).toEqual({ "a/.d/b" })
				jestExpect(match(fixtures, "a/.*/b", { dot = true })).toEqual({ "a/.d/b" })
			end)

			itFIXME("should match dotfiles when `options.dot` is true", function()
				assert(isMatch(".dot", "**/*dot", { dot = true }))
				assert(isMatch(".dot", "*dot", { dot = true }))
				assert(isMatch(".dot", "?dot", { dot = true }))
				assert(isMatch(".dotfile.js", ".*.js", { dot = true }))
				assert(isMatch("/a/b/.dot", "/**/*dot", { dot = true }))
				assert(isMatch("/a/b/.dot", "**/*dot", { dot = true }))
				assert(isMatch("/a/b/.dot", "**/.[d]ot", { dot = true }))
				assert(isMatch("/a/b/.dot", "**/?dot", { dot = true }))
				assert(isMatch("/a/b/.dot", "/**/.[d]ot", { dot = true }))
				assert(isMatch("/a/b/.dot", "/**/?dot", { dot = true }))
				assert(isMatch("a/b/.dot", "**/*dot", { dot = true }))
				assert(isMatch("a/b/.dot", "**/.[d]ot", { dot = true }))
				assert(isMatch("a/b/.dot", "**/?dot", { dot = true }))
			end)

			it("should not match dotfiles when `options.dot` is false", function()
				assert(not isMatch("a/b/.dot", "**/*dot", { dot = false }))
				assert(not isMatch("a/b/.dot", "**/?dot", { dot = false }))
			end)

			it("should not match dotfiles when `.dot` is not defined and a dot is not in the glob pattern", function()
				assert(not isMatch("a/b/.dot", "**/*dot"))
				assert(not isMatch("a/b/.dot", "**/?dot"))
			end)
		end)

		describe("valid dotfiles", function()
			it("micromatch issue#63 (dots)", function()
				assert(not isMatch("/aaa/.git/foo", "/aaa/**/*"))
				assert(not isMatch("/aaa/bbb/.git", "/aaa/bbb/*"))
				assert(not isMatch("/aaa/bbb/.git", "/aaa/bbb/**"))
				assert(not isMatch("/aaa/bbb/ccc/.git", "/aaa/bbb/**"))
				assert(not isMatch("aaa/bbb/.git", "aaa/bbb/**"))
				assert(isMatch("/aaa/bbb/", "/aaa/bbb/**"))
				assert(isMatch("/aaa/bbb/foo", "/aaa/bbb/**"))
				assert(isMatch("/aaa/.git/foo", "/aaa/**/*", { dot = true }))
				assert(isMatch("/aaa/bbb/.git", "/aaa/bbb/*", { dot = true }))
				assert(isMatch("/aaa/bbb/.git", "/aaa/bbb/**", { dot = true }))
				assert(isMatch("/aaa/bbb/ccc/.git", "/aaa/bbb/**", { dot = true }))
				assert(isMatch("aaa/bbb/.git", "aaa/bbb/**", { dot = true }))
			end)

			it("should not match dotfiles with single stars by default", function()
				assert(isMatch("foo", "*"))
				assert(isMatch("foo/bar", "*/*"))
				assert(not isMatch(".foo", "*"))
				assert(not isMatch(".foo/bar", "*/*"))
				assert(not isMatch(".foo/.bar", "*/*"))
				assert(not isMatch("foo/.bar", "*/*"))
				assert(not isMatch("foo/.bar/baz", "*/*/*"))
			end)

			it("should work with dots in the path", function()
				assert(isMatch("../test.js", "../*.js"))
				assert(isMatch("../.test.js", "../*.js", { dot = true }))
				assert(not isMatch("../.test.js", "../*.js"))
			end)

			it("should not match dotfiles with globstar by default", function()
				assert(not isMatch(".foo", "**/**"))
				assert(not isMatch(".foo", "**"))
				assert(not isMatch(".foo", "**/*"))
				assert(not isMatch("bar/.foo", "**/*"))
				assert(not isMatch(".bar", "**/*"))
				assert(not isMatch("foo/.bar", "**/*"))
				assert(not isMatch("foo/.bar", "**/*a*"))
			end)

			it("should match dotfiles when a leading dot is in the pattern", function()
				assert(not isMatch("foo", "**/.*a*"))
				assert(isMatch(".bar", "**/.*a*"))
				assert(isMatch("foo/.bar", "**/.*a*"))
				assert(isMatch(".foo", "**/.*"))
				assert(not isMatch("foo", ".*a*"))
				assert(isMatch(".bar", ".*a*"))
				assert(not isMatch("bar", ".*a*"))
				assert(not isMatch("foo", ".b*"))
				assert(isMatch(".bar", ".b*"))
				assert(not isMatch("bar", ".b*"))
				assert(not isMatch("foo", ".*r"))
				assert(isMatch(".bar", ".*r"))
				assert(not isMatch("bar", ".*r"))
			end)

			it("should not match a dot when the dot is not explicitly defined", function()
				assert(not isMatch(".dot", "**/*dot"))
				assert(not isMatch(".dot", "**/?dot"))
				assert(not isMatch(".dot", "*/*dot"))
				assert(not isMatch(".dot", "*/?dot"))
				assert(not isMatch(".dot", "*dot"))
				assert(not isMatch(".dot", "/*dot"))
				assert(not isMatch(".dot", "/?dot"))
				assert(not isMatch("/.dot", "**/*dot"))
				assert(not isMatch("/.dot", "**/?dot"))
				assert(not isMatch("/.dot", "*/*dot"))
				assert(not isMatch("/.dot", "*/?dot"))
				assert(not isMatch("/.dot", "/*dot"))
				assert(not isMatch("/.dot", "/?dot"))
				assert(not isMatch("abc/.dot", "*/*dot"))
				assert(not isMatch("abc/.dot", "*/?dot"))
				assert(not isMatch("abc/.dot", "abc/*dot"))
				assert(not isMatch("abc/abc/.dot", "**/*dot"))
				assert(not isMatch("abc/abc/.dot", "**/?dot"))
			end)

			itFIXME("should not match leading dots with question marks", function()
				assert(not isMatch(".dot", "?dot"))
				assert(not isMatch("/.dot", "/?dot"))
				assert(not isMatch("abc/.dot", "abc/?dot"))
			end)

			it("should match double dots when defined in pattern", function()
				assert(not isMatch("../../b", "**/../*"))
				assert(not isMatch("../../b", "*/../*"))
				assert(not isMatch("../../b", "../*"))
				assert(not isMatch("../abc", "*/../*"))
				assert(not isMatch("../abc", "*/../*"))
				assert(not isMatch("../c/d", "**/../*"))
				assert(not isMatch("../c/d", "*/../*"))
				assert(not isMatch("../c/d", "../*"))
				assert(not isMatch("abc", "**/../*"))
				assert(not isMatch("abc", "*/../*"))
				assert(not isMatch("abc", "../*"))
				assert(not isMatch("abc/../abc", "../*"))
				assert(not isMatch("abc/../abc", "../*"))
				assert(not isMatch("abc/../", "**/../*"))
				assert(isMatch("..", ".."))
				assert(isMatch("../b", "../*"))
				assert(isMatch("../../b", "../../*"))
				assert(isMatch("../../..", "../../.."))
				assert(isMatch("../abc", "**/../*"))
				assert(isMatch("../abc", "../*"))
				assert(isMatch("abc/../abc", "**/../*"))
				assert(isMatch("abc/../abc", "*/../*"))
				assert(isMatch("abc/../abc", "**/../*"))
				assert(isMatch("abc/../abc", "*/../*"))
			end)

			it("should not match double dots when not defined in pattern", function()
				return Promise.resolve():andThen(function()
					assert(not isMatch("../abc", "**/*"))
					assert(not isMatch("../abc", "**/**/**"))
					assert(not isMatch("../abc", "**/**/abc"))
					assert(not isMatch("../abc", "**/**/abc/**"))
					assert(not isMatch("../abc", "**/*/*"))
					assert(not isMatch("../abc", "**/abc/**"))
					assert(not isMatch("../abc", "*/*"))
					assert(not isMatch("../abc", "*/abc/**"))
					assert(not isMatch("abc/../abc", "**/*"))
					assert(not isMatch("abc/../abc", "**/*/*"))
					assert(not isMatch("abc/../abc", "**/*/abc"))
					assert(not isMatch("abc/../abc", "*/**/*"))
					assert(not isMatch("abc/../abc", "*/*/*"))
					assert(not isMatch("abc/../abc", "abc/**/*"))
					assert(not isMatch("abc/../abc", "**/**/*"))
					assert(not isMatch("abc/../abc", "**/*/*"))
					assert(not isMatch("abc/../abc", "*/**/*"))
					assert(not isMatch("abc/../abc", "*/*/*"))
					assert(not isMatch("../abc", "**/**/**", { dot = true }))
					assert(not isMatch("../abc", "**/**/abc", { dot = true }))
					assert(not isMatch("../abc", "**/**/abc/**", { dot = true }))
					assert(not isMatch("../abc", "**/abc/**", { dot = true }))
					assert(not isMatch("../abc", "*/abc/**", { dot = true }))
					assert(not isMatch("../abc", "**/*/*", { dot = true }))
					assert(not isMatch("../abc", "*/*", { dot = true }))
					assert(not isMatch("abc/../abc", "**/*/*", { dot = true }))
					assert(not isMatch("abc/../abc", "*/*/*", { dot = true }))
					assert(not isMatch("abc/../abc", "**/*/*", { dot = true }))
					assert(not isMatch("abc/../abc", "*/*/*", { dot = true }))
					assert(not isMatch("abc/..", "**/*", { dot = true }))
					assert(not isMatch("abc/..", "*/*", { dot = true }))
					assert(not isMatch("abc/abc/..", "*/**/*", { dot = true }))
					assert(not isMatch("abc/../abc", "abc/**/*"))
					assert(not isMatch("abc/../abc", "abc/**/*", { dot = true }))
					assert(not isMatch("abc/../abc", "abc/**/*/*", { dot = true }))
					assert(not isMatch("abc/../abc", "abc/*/*/*", { dot = true }))
					assert(not isMatch("abc/../abc", "abc/**/*/*", { dot = true }))
					assert(not isMatch("abc/../abc", "abc/*/*/*", { dot = true }))
					assert(not isMatch("abc/..", "abc/**/*", { dot = true }))
					assert(not isMatch("abc/..", "abc/*/*", { dot = true }))
					assert(not isMatch("abc/abc/..", "abc/*/**/*", { dot = true }))
					assert(not isMatch("../abc", "**/*/*", { dot = true }))
					assert(not isMatch("../abc", "*/*", { dot = true }))
					assert(not isMatch("abc/../abc", "**/*/*", { dot = true }))
					assert(not isMatch("abc/../abc", "*/*/*", { dot = true }))
					assert(not isMatch("abc/../abc", "**/*/*", { dot = true }))
					assert(not isMatch("abc/../abc", "*/*/*", { dot = true }))
					assert(not isMatch("abc/..", "**/*", { dot = true }))
					assert(not isMatch("abc/..", "*/*", { dot = true }))
					assert(not isMatch("abc/abc/..", "*/**/*", { dot = true }))
					assert(not isMatch("abc/../abc", "abc/**/*", { strictSlashes = true }))
					assert(not isMatch("abc/../abc", "abc/**/*/*", { strictSlashes = true }))
					assert(not isMatch("abc/../abc", "abc/**/*/*", { strictSlashes = true }))
					assert(not isMatch("abc/../abc", "abc/*/*/*", { strictSlashes = true }))
					assert(not isMatch("abc/../abc", "abc/**/*/*", { strictSlashes = true }))
					assert(not isMatch("abc/../abc", "abc/*/*/*", { strictSlashes = true }))
					assert(not isMatch("abc/..", "abc/**/*", { strictSlashes = true }))
					assert(not isMatch("abc/..", "abc/*/*", { strictSlashes = true }))
					assert(not isMatch("abc/abc/..", "abc/*/**/*", { strictSlashes = true }))
				end)
			end)

			it("should not match single exclusive dots when not defined in pattern", function()
				return Promise.resolve():andThen(function()
					assert(not isMatch(".", "**"))
					assert(not isMatch("abc/./abc", "**"))
					assert(not isMatch("abc/abc/.", "**"))
					assert(not isMatch("abc/abc/./abc", "**"))
					assert(not isMatch(".", "**", { dot = true }))
					assert(not isMatch("..", "**", { dot = true }))
					assert(not isMatch("../", "**", { dot = true }))
					assert(not isMatch("/../", "**", { dot = true }))
					assert(not isMatch("/..", "**", { dot = true }))
					assert(not isMatch("abc/./abc", "**", { dot = true }))
					assert(not isMatch("abc/abc/.", "**", { dot = true }))
					assert(not isMatch("abc/abc/./abc", "**", { dot = true }))
				end)
			end)

			it("should match leading dots in root path when glob is prefixed with **/", function()
				assert(not isMatch(".abc/.abc", "**/.abc/**"))
				assert(isMatch(".abc", "**/.abc/**"))
				assert(isMatch(".abc/", "**/.abc/**"))
				assert(isMatch(".abc/abc", "**/.abc/**"))
				assert(isMatch(".abc/abc/b", "**/.abc/**"))
				assert(isMatch("abc/.abc/b", "**/.abc/**"))
				assert(isMatch("abc/abc/.abc", "**/.abc"))
				assert(isMatch("abc/abc/.abc", "**/.abc/**"))
				assert(isMatch("abc/abc/.abc/", "**/.abc/**"))
				assert(isMatch("abc/abc/.abc/abc", "**/.abc/**"))
				assert(isMatch("abc/abc/.abc/c/d", "**/.abc/**"))
				assert(isMatch("abc/abc/.abc/c/d/e", "**/.abc/**"))
			end)

			it("should match a dot when the dot is explicitly defined", function()
				assert(isMatch("/.dot", "**/.dot*"))
				assert(isMatch("aaa/bbb/.dot", "**/.dot*"))
				assert(isMatch("aaa/.dot", "*/.dot*"))
				assert(isMatch(".aaa.bbb", ".*.*"))
				assert(isMatch(".aaa.bbb", ".*.*"))
				assert(not isMatch(".aaa.bbb/", ".*.*", { strictSlashes = true }))
				assert(not isMatch(".aaa.bbb", ".*.*/"))
				assert(isMatch(".aaa.bbb/", ".*.*/"))
				assert(isMatch(".aaa.bbb/", ".*.*{,/}"))
				assert(isMatch(".aaa.bbb", ".*.bbb"))
				assert(isMatch(".dotfile.js", ".*.js"))
				assert(isMatch(".dot", ".*ot"))
				assert(isMatch(".dot.bbb.ccc", ".*ot.*.*"))
				assert(isMatch(".dot", ".d?t"))
				assert(isMatch(".dot", ".dot*"))
				assert(isMatch("/.dot", "/.dot*"))
			end)

			itFIXME("should match dots defined in brackets", function()
				assert(isMatch("/.dot", "**/.[d]ot"))
				assert(isMatch("aaa/.dot", "**/.[d]ot"))
				assert(isMatch("aaa/bbb/.dot", "**/.[d]ot"))
				assert(isMatch("aaa/.dot", "*/.[d]ot"))
				assert(isMatch(".dot", ".[d]ot"))
				assert(isMatch(".dot", ".[d]ot"))
				assert(isMatch("/.dot", "/.[d]ot"))
			end)
		end)
	end)
end
