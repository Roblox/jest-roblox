-- ROBLOX upstream: https://github.com/micromatch/picomatch/tree/2.3.1/test/slashes-windows.js

return function()
	local CurrentModule = script.Parent
	local PicomatchModule = CurrentModule.Parent

	local support = require(CurrentModule.support)
	local Picomatch = require(PicomatchModule)
	local isMatch, makeRe = Picomatch.isMatch, Picomatch.makeRe
	describe("slash handling - windows", function()
		beforeEach(function()
			return support.windowsPathSep()
		end)
		afterEach(function()
			return support.resetPathSep()
		end)
		beforeAll(function()
			return support.resetPathSep()
		end)
		afterAll(function()
			return support.resetPathSep()
		end)

		it("should match absolute windows paths with regex from makeRe", function()
			local regex = makeRe("**/path/**", { windows = true })
			assert(regex:test("C:\\Users\\user\\Projects\\project\\path\\image.jpg"))
		end)

		itFIXME("should match windows path separators with a string literal", function()
			assert(not isMatch("a\\a", "(a/b)"))
			assert(isMatch("a\\b", "(a/b)"))
			assert(not isMatch("a\\c", "(a/b)"))
			assert(not isMatch("b\\a", "(a/b)"))
			assert(not isMatch("b\\b", "(a/b)"))
			assert(not isMatch("b\\c", "(a/b)"))
			assert(not isMatch("a\\a", "a/b"))
			assert(isMatch("a\\b", "a/b"))
			assert(not isMatch("a\\c", "a/b"))
			assert(not isMatch("b\\a", "a/b"))
			assert(not isMatch("b\\b", "a/b"))
			assert(not isMatch("b\\c", "a/b"))
		end)

		itFIXME("should not match literal backslashes with literal forward slashes when windows is disabled", function()
			assert(not isMatch("a\\a", "a\\b", { windows = false }))
			assert(isMatch("a\\b", "a\\b", { windows = false }))
			assert(not isMatch("a\\c", "a\\b", { windows = false }))
			assert(not isMatch("b\\a", "a\\b", { windows = false }))
			assert(not isMatch("b\\b", "a\\b", { windows = false }))
			assert(not isMatch("b\\c", "a\\b", { windows = false }))
			assert(not isMatch("a\\a", "a/b", { windows = false }))
			assert(not isMatch("a\\b", "a/b", { windows = false }))
			assert(not isMatch("a\\c", "a/b", { windows = false }))
			assert(not isMatch("b\\a", "a/b", { windows = false }))
			assert(not isMatch("b\\b", "a/b", { windows = false }))
			assert(not isMatch("b\\c", "a/b", { windows = false }))
		end)

		itFIXME("should match an array of literal strings", function()
			assert(not isMatch("a\\a", "(a/b)"))
			assert(isMatch("a\\b", "(a/b)"))
			assert(not isMatch("a\\c", "(a/b)"))
			assert(not isMatch("b\\a", "(a/b)"))
			assert(not isMatch("b\\b", "(a/b)"))
			assert(not isMatch("b\\c", "(a/b)"))
		end)

		itFIXME("should not match backslashes with forward slashes when windows is disabled", function()
			assert(not isMatch("a\\a", "a/(a|c)", { windows = false }))
			assert(not isMatch("a\\b", "a/(a|c)", { windows = false }))
			assert(not isMatch("a\\c", "a/(a|c)", { windows = false }))
			assert(not isMatch("a\\a", "a/(a|b|c)", { windows = false }))
			assert(not isMatch("a\\b", "a/(a|b|c)", { windows = false }))
			assert(not isMatch("a\\c", "a/(a|b|c)", { windows = false }))
			assert(not isMatch("a\\a", "(a\\b)", { windows = false }))
			assert(isMatch("a\\b", "(a\\\\b)", { windows = false }))
			assert(not isMatch("a\\c", "(a\\b)", { windows = false }))
			assert(not isMatch("b\\a", "(a\\b)", { windows = false }))
			assert(not isMatch("b\\b", "(a\\b)", { windows = false }))
			assert(not isMatch("b\\c", "(a\\b)", { windows = false }))
			assert(not isMatch("a\\a", "(a/b)", { windows = false }))
			assert(not isMatch("a\\b", "(a/b)", { windows = false }))
			assert(not isMatch("a\\c", "(a/b)", { windows = false }))
			assert(not isMatch("b\\a", "(a/b)", { windows = false }))
			assert(not isMatch("b\\b", "(a/b)", { windows = false }))
			assert(not isMatch("b\\c", "(a/b)", { windows = false }))
			assert(not isMatch("a\\a", "a/c", { windows = false }))
			assert(not isMatch("a\\b", "a/c", { windows = false }))
			assert(not isMatch("a\\c", "a/c", { windows = false }))
			assert(not isMatch("b\\a", "a/c", { windows = false }))
			assert(not isMatch("b\\b", "a/c", { windows = false }))
			assert(not isMatch("b\\c", "a/c", { windows = false }))
		end)

		itFIXME('should match backslashes when followed by regex logical "or"', function()
			assert(isMatch("a\\a", "a/(a|c)"))
			assert(not isMatch("a\\b", "a/(a|c)"))
			assert(isMatch("a\\c", "a/(a|c)"))
			assert(isMatch("a\\a", "a/(a|b|c)"))
			assert(isMatch("a\\b", "a/(a|b|c)"))
			assert(isMatch("a\\c", "a/(a|b|c)"))
		end)

		itFIXME("should support matching backslashes with regex ranges", function()
			assert(not isMatch("a\\a", "a/[b-c]"))
			assert(isMatch("a\\b", "a/[b-c]"))
			assert(isMatch("a\\c", "a/[b-c]"))
			assert(not isMatch("a\\x\\y", "a/[b-c]"))
			assert(not isMatch("a\\x", "a/[b-c]"))
			assert(isMatch("a\\a", "a/[a-z]"))
			assert(isMatch("a\\b", "a/[a-z]"))
			assert(isMatch("a\\c", "a/[a-z]"))
			assert(not isMatch("a\\x\\y", "a/[a-z]"))
			assert(isMatch("a\\x\\y", "a/[a-z]/y"))
			assert(isMatch("a\\x", "a/[a-z]"))
			assert(not isMatch("a\\a", "a/[b-c]", { windows = false }))
			assert(not isMatch("a\\b", "a/[b-c]", { windows = false }))
			assert(not isMatch("a\\c", "a/[b-c]", { windows = false }))
			assert(not isMatch("a\\x\\y", "a/[b-c]", { windows = false }))
			assert(not isMatch("a\\x", "a/[b-c]", { windows = false }))
			assert(not isMatch("a\\a", "a/[a-z]", { windows = false }))
			assert(not isMatch("a\\b", "a/[a-z]", { windows = false }))
			assert(not isMatch("a\\c", "a/[a-z]", { windows = false }))
			assert(not isMatch("a\\x\\y", "a/[a-z]", { windows = false }))
			assert(not isMatch("a\\x", "a/[a-z]", { windows = false }))
		end)

		itFIXME("should not match slashes with single stars", function()
			assert(isMatch("a", "*"))
			assert(isMatch("b", "*"))
			assert(not isMatch("a\\a", "*"))
			assert(not isMatch("a\\b", "*"))
			assert(not isMatch("a\\c", "*"))
			assert(not isMatch("a\\x", "*"))
			assert(not isMatch("a\\a\\a", "*"))
			assert(not isMatch("a\\a\\b", "*"))
			assert(not isMatch("a\\a\\a\\a", "*"))
			assert(not isMatch("a\\a\\a\\a\\a", "*"))
			assert(not isMatch("x\\y", "*"))
			assert(not isMatch("z\\z", "*"))
			assert(not isMatch("a", "*/*"))
			assert(not isMatch("b", "*/*"))
			assert(isMatch("a\\a", "*/*"))
			assert(isMatch("a\\b", "*/*"))
			assert(isMatch("a\\c", "*/*"))
			assert(isMatch("a\\x", "*/*"))
			assert(not isMatch("a\\a\\a", "*/*"))
			assert(not isMatch("a\\a\\b", "*/*"))
			assert(not isMatch("a\\a\\a\\a", "*/*"))
			assert(not isMatch("a\\a\\a\\a\\a", "*/*"))
			assert(isMatch("x\\y", "*/*"))
			assert(isMatch("z\\z", "*/*"))
			assert(not isMatch("a", "*/*/*"))
			assert(not isMatch("b", "*/*/*"))
			assert(not isMatch("a\\a", "*/*/*"))
			assert(not isMatch("a\\b", "*/*/*"))
			assert(not isMatch("a\\c", "*/*/*"))
			assert(not isMatch("a\\x", "*/*/*"))
			assert(isMatch("a\\a\\a", "*/*/*"))
			assert(isMatch("a\\a\\b", "*/*/*"))
			assert(not isMatch("a\\a\\a\\a", "*/*/*"))
			assert(not isMatch("a\\a\\a\\a\\a", "*/*/*"))
			assert(not isMatch("x\\y", "*/*/*"))
			assert(not isMatch("z\\z", "*/*/*"))
			assert(not isMatch("a", "*/*/*/*"))
			assert(not isMatch("b", "*/*/*/*"))
			assert(not isMatch("a\\a", "*/*/*/*"))
			assert(not isMatch("a\\b", "*/*/*/*"))
			assert(not isMatch("a\\c", "*/*/*/*"))
			assert(not isMatch("a\\x", "*/*/*/*"))
			assert(not isMatch("a\\a\\a", "*/*/*/*"))
			assert(not isMatch("a\\a\\b", "*/*/*/*"))
			assert(isMatch("a\\a\\a\\a", "*/*/*/*"))
			assert(not isMatch("a\\a\\a\\a\\a", "*/*/*/*"))
			assert(not isMatch("x\\y", "*/*/*/*"))
			assert(not isMatch("z\\z", "*/*/*/*"))
			assert(not isMatch("a", "*/*/*/*/*"))
			assert(not isMatch("b", "*/*/*/*/*"))
			assert(not isMatch("a\\a", "*/*/*/*/*"))
			assert(not isMatch("a\\b", "*/*/*/*/*"))
			assert(not isMatch("a\\c", "*/*/*/*/*"))
			assert(not isMatch("a\\x", "*/*/*/*/*"))
			assert(not isMatch("a\\a\\a", "*/*/*/*/*"))
			assert(not isMatch("a\\a\\b", "*/*/*/*/*"))
			assert(not isMatch("a\\a\\a\\a", "*/*/*/*/*"))
			assert(isMatch("a\\a\\a\\a\\a", "*/*/*/*/*"))
			assert(not isMatch("x\\y", "*/*/*/*/*"))
			assert(not isMatch("z\\z", "*/*/*/*/*"))
			assert(not isMatch("a", "a/*"))
			assert(not isMatch("b", "a/*"))
			assert(isMatch("a\\a", "a/*"))
			assert(isMatch("a\\b", "a/*"))
			assert(isMatch("a\\c", "a/*"))
			assert(isMatch("a\\x", "a/*"))
			assert(not isMatch("a\\a\\a", "a/*"))
			assert(not isMatch("a\\a\\b", "a/*"))
			assert(not isMatch("a\\a\\a\\a", "a/*"))
			assert(not isMatch("a\\a\\a\\a\\a", "a/*"))
			assert(not isMatch("x\\y", "a/*"))
			assert(not isMatch("z\\z", "a/*"))
			assert(not isMatch("a", "a/*/*"))
			assert(not isMatch("b", "a/*/*"))
			assert(not isMatch("a\\a", "a/*/*"))
			assert(not isMatch("a\\b", "a/*/*"))
			assert(not isMatch("a\\c", "a/*/*"))
			assert(not isMatch("a\\x", "a/*/*"))
			assert(isMatch("a\\a\\a", "a/*/*"))
			assert(isMatch("a\\a\\b", "a/*/*"))
			assert(not isMatch("a\\a\\a\\a", "a/*/*"))
			assert(not isMatch("a\\a\\a\\a\\a", "a/*/*"))
			assert(not isMatch("x\\y", "a/*/*"))
			assert(not isMatch("z\\z", "a/*/*"))
			assert(not isMatch("a", "a/*/*/*"))
			assert(not isMatch("b", "a/*/*/*"))
			assert(not isMatch("a\\a", "a/*/*/*"))
			assert(not isMatch("a\\b", "a/*/*/*"))
			assert(not isMatch("a\\c", "a/*/*/*"))
			assert(not isMatch("a\\x", "a/*/*/*"))
			assert(not isMatch("a\\a\\a", "a/*/*/*"))
			assert(not isMatch("a\\a\\b", "a/*/*/*"))
			assert(isMatch("a\\a\\a\\a", "a/*/*/*"))
			assert(not isMatch("a\\a\\a\\a\\a", "a/*/*/*"))
			assert(not isMatch("x\\y", "a/*/*/*"))
			assert(not isMatch("z\\z", "a/*/*/*"))
			assert(not isMatch("a", "a/*/*/*/*"))
			assert(not isMatch("b", "a/*/*/*/*"))
			assert(not isMatch("a\\a", "a/*/*/*/*"))
			assert(not isMatch("a\\b", "a/*/*/*/*"))
			assert(not isMatch("a\\c", "a/*/*/*/*"))
			assert(not isMatch("a\\x", "a/*/*/*/*"))
			assert(not isMatch("a\\a\\a", "a/*/*/*/*"))
			assert(not isMatch("a\\a\\b", "a/*/*/*/*"))
			assert(not isMatch("a\\a\\a\\a", "a/*/*/*/*"))
			assert(isMatch("a\\a\\a\\a\\a", "a/*/*/*/*"))
			assert(not isMatch("x\\y", "a/*/*/*/*"))
			assert(not isMatch("z\\z", "a/*/*/*/*"))
			assert(not isMatch("a", "a/*/a"))
			assert(not isMatch("b", "a/*/a"))
			assert(not isMatch("a\\a", "a/*/a"))
			assert(not isMatch("a\\b", "a/*/a"))
			assert(not isMatch("a\\c", "a/*/a"))
			assert(not isMatch("a\\x", "a/*/a"))
			assert(isMatch("a\\a\\a", "a/*/a"))
			assert(not isMatch("a\\a\\b", "a/*/a"))
			assert(not isMatch("a\\a\\a\\a", "a/*/a"))
			assert(not isMatch("a\\a\\a\\a\\a", "a/*/a"))
			assert(not isMatch("x\\y", "a/*/a"))
			assert(not isMatch("z\\z", "a/*/a"))
			assert(not isMatch("a", "a/*/b"))
			assert(not isMatch("b", "a/*/b"))
			assert(not isMatch("a\\a", "a/*/b"))
			assert(not isMatch("a\\b", "a/*/b"))
			assert(not isMatch("a\\c", "a/*/b"))
			assert(not isMatch("a\\x", "a/*/b"))
			assert(not isMatch("a\\a\\a", "a/*/b"))
			assert(isMatch("a\\a\\b", "a/*/b"))
			assert(not isMatch("a\\a\\a\\a", "a/*/b"))
			assert(not isMatch("a\\a\\a\\a\\a", "a/*/b"))
			assert(not isMatch("x\\y", "a/*/b"))
			assert(not isMatch("z\\z", "a/*/b"))
			assert(not isMatch("a", "*/*", { windows = false }))
			assert(not isMatch("b", "*/*", { windows = false }))
			assert(not isMatch("a\\a", "*/*", { windows = false }))
			assert(not isMatch("a\\b", "*/*", { windows = false }))
			assert(not isMatch("a\\c", "*/*", { windows = false }))
			assert(not isMatch("a\\x", "*/*", { windows = false }))
			assert(not isMatch("a\\a\\a", "*/*", { windows = false }))
			assert(not isMatch("a\\a\\b", "*/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a", "*/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a\\a", "*/*", { windows = false }))
			assert(not isMatch("x\\y", "*/*", { windows = false }))
			assert(not isMatch("z\\z", "*/*", { windows = false }))
			assert(not isMatch("a", "*/*/*", { windows = false }))
			assert(not isMatch("b", "*/*/*", { windows = false }))
			assert(not isMatch("a\\a", "*/*/*", { windows = false }))
			assert(not isMatch("a\\b", "*/*/*", { windows = false }))
			assert(not isMatch("a\\c", "*/*/*", { windows = false }))
			assert(not isMatch("a\\x", "*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a", "*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\b", "*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a", "*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a\\a", "*/*/*", { windows = false }))
			assert(not isMatch("x\\y", "*/*/*", { windows = false }))
			assert(not isMatch("z\\z", "*/*/*", { windows = false }))
			assert(not isMatch("a", "*/*/*/*", { windows = false }))
			assert(not isMatch("b", "*/*/*/*", { windows = false }))
			assert(not isMatch("a\\a", "*/*/*/*", { windows = false }))
			assert(not isMatch("a\\b", "*/*/*/*", { windows = false }))
			assert(not isMatch("a\\c", "*/*/*/*", { windows = false }))
			assert(not isMatch("a\\x", "*/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a", "*/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\b", "*/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a", "*/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a\\a", "*/*/*/*", { windows = false }))
			assert(not isMatch("x\\y", "*/*/*/*", { windows = false }))
			assert(not isMatch("z\\z", "*/*/*/*", { windows = false }))
			assert(not isMatch("a", "*/*/*/*/*", { windows = false }))
			assert(not isMatch("b", "*/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\a", "*/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\b", "*/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\c", "*/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\x", "*/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a", "*/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\b", "*/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a", "*/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a\\a", "*/*/*/*/*", { windows = false }))
			assert(not isMatch("x\\y", "*/*/*/*/*", { windows = false }))
			assert(not isMatch("z\\z", "*/*/*/*/*", { windows = false }))
			assert(not isMatch("a", "a/*", { windows = false }))
			assert(not isMatch("b", "a/*", { windows = false }))
			assert(not isMatch("a\\a", "a/*", { windows = false }))
			assert(not isMatch("a\\b", "a/*", { windows = false }))
			assert(not isMatch("a\\c", "a/*", { windows = false }))
			assert(not isMatch("a\\x", "a/*", { windows = false }))
			assert(not isMatch("a\\a\\a", "a/*", { windows = false }))
			assert(not isMatch("a\\a\\b", "a/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a", "a/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a\\a", "a/*", { windows = false }))
			assert(not isMatch("x\\y", "a/*", { windows = false }))
			assert(not isMatch("z\\z", "a/*", { windows = false }))
			assert(not isMatch("a", "a/*/*", { windows = false }))
			assert(not isMatch("b", "a/*/*", { windows = false }))
			assert(not isMatch("a\\a", "a/*/*", { windows = false }))
			assert(not isMatch("a\\b", "a/*/*", { windows = false }))
			assert(not isMatch("a\\c", "a/*/*", { windows = false }))
			assert(not isMatch("a\\x", "a/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a", "a/*/*", { windows = false }))
			assert(not isMatch("a\\a\\b", "a/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a", "a/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a\\a", "a/*/*", { windows = false }))
			assert(not isMatch("x\\y", "a/*/*", { windows = false }))
			assert(not isMatch("z\\z", "a/*/*", { windows = false }))
			assert(not isMatch("a", "a/*/*/*", { windows = false }))
			assert(not isMatch("b", "a/*/*/*", { windows = false }))
			assert(not isMatch("a\\a", "a/*/*/*", { windows = false }))
			assert(not isMatch("a\\b", "a/*/*/*", { windows = false }))
			assert(not isMatch("a\\c", "a/*/*/*", { windows = false }))
			assert(not isMatch("a\\x", "a/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a", "a/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\b", "a/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a", "a/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a\\a", "a/*/*/*", { windows = false }))
			assert(not isMatch("x\\y", "a/*/*/*", { windows = false }))
			assert(not isMatch("z\\z", "a/*/*/*", { windows = false }))
			assert(not isMatch("a", "a/*/*/*/*", { windows = false }))
			assert(not isMatch("b", "a/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\a", "a/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\b", "a/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\c", "a/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\x", "a/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a", "a/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\b", "a/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a", "a/*/*/*/*", { windows = false }))
			assert(not isMatch("a\\a\\a\\a\\a", "a/*/*/*/*", { windows = false }))
			assert(not isMatch("x\\y", "a/*/*/*/*", { windows = false }))
			assert(not isMatch("z\\z", "a/*/*/*/*", { windows = false }))
			assert(not isMatch("a", "a/*/a", { windows = false }))
			assert(not isMatch("b", "a/*/a", { windows = false }))
			assert(not isMatch("a\\a", "a/*/a", { windows = false }))
			assert(not isMatch("a\\b", "a/*/a", { windows = false }))
			assert(not isMatch("a\\c", "a/*/a", { windows = false }))
			assert(not isMatch("a\\x", "a/*/a", { windows = false }))
			assert(not isMatch("a\\a\\a", "a/*/a", { windows = false }))
			assert(not isMatch("a\\a\\b", "a/*/a", { windows = false }))
			assert(not isMatch("a\\a\\a\\a", "a/*/a", { windows = false }))
			assert(not isMatch("a\\a\\a\\a\\a", "a/*/a", { windows = false }))
			assert(not isMatch("x\\y", "a/*/a", { windows = false }))
			assert(not isMatch("z\\z", "a/*/a", { windows = false }))
			assert(not isMatch("a", "a/*/b", { windows = false }))
			assert(not isMatch("b", "a/*/b", { windows = false }))
			assert(not isMatch("a\\a", "a/*/b", { windows = false }))
			assert(not isMatch("a\\b", "a/*/b", { windows = false }))
			assert(not isMatch("a\\c", "a/*/b", { windows = false }))
			assert(not isMatch("a\\x", "a/*/b", { windows = false }))
			assert(not isMatch("a\\a\\a", "a/*/b", { windows = false }))
			assert(not isMatch("a\\a\\b", "a/*/b", { windows = false }))
			assert(not isMatch("a\\a\\a\\a", "a/*/b", { windows = false }))
			assert(not isMatch("a\\a\\a\\a\\a", "a/*/b", { windows = false }))
			assert(not isMatch("x\\y", "a/*/b", { windows = false }))
			assert(not isMatch("z\\z", "a/*/b", { windows = false }))
		end)

		itFIXME("should support globstars (**)", function()
			assert(isMatch("a\\a", "a/**"))
			assert(isMatch("a\\b", "a/**"))
			assert(isMatch("a\\c", "a/**"))
			assert(isMatch("a\\x", "a/**"))
			assert(isMatch("a\\x\\y", "a/**"))
			assert(isMatch("a\\x\\y\\z", "a/**"))
			assert(isMatch("a\\a", "a/**/*"))
			assert(isMatch("a\\b", "a/**/*"))
			assert(isMatch("a\\c", "a/**/*"))
			assert(isMatch("a\\x", "a/**/*"))
			assert(isMatch("a\\x\\y", "a/**/*"))
			assert(isMatch("a\\x\\y\\z", "a/**/*"))
			assert(isMatch("a\\a", "a/**/**/*"))
			assert(isMatch("a\\b", "a/**/**/*"))
			assert(isMatch("a\\c", "a/**/**/*"))
			assert(isMatch("a\\x", "a/**/**/*"))
			assert(isMatch("a\\x\\y", "a/**/**/*"))
			assert(isMatch("a\\x\\y\\z", "a/**/**/*"))
		end)

		it("should not match backslashes with globstars when disabled", function()
			assert(not isMatch("a\\a", "a/**", { windows = false }))
			assert(not isMatch("a\\b", "a/**", { windows = false }))
			assert(not isMatch("a\\c", "a/**", { windows = false }))
			assert(not isMatch("a\\x", "a/**", { windows = false }))
			assert(not isMatch("a\\x\\y", "a/**", { windows = false }))
			assert(not isMatch("a\\x\\y\\z", "a/**", { windows = false }))
			assert(not isMatch("a\\a", "a/**/*", { windows = false }))
			assert(not isMatch("a\\b", "a/**/*", { windows = false }))
			assert(not isMatch("a\\c", "a/**/*", { windows = false }))
			assert(not isMatch("a\\x", "a/**/*", { windows = false }))
			assert(not isMatch("a\\x\\y", "a/**/*", { windows = false }))
			assert(not isMatch("a\\x\\y\\z", "a/**/*", { windows = false }))
			assert(not isMatch("a\\a", "a/**/**/*", { windows = false }))
			assert(not isMatch("a\\b", "a/**/**/*", { windows = false }))
			assert(not isMatch("a\\c", "a/**/**/*", { windows = false }))
			assert(not isMatch("a\\x", "a/**/**/*", { windows = false }))
			assert(not isMatch("a\\x\\y", "a/**/**/*", { windows = false }))
			assert(not isMatch("a\\x\\y\\z", "a/**/**/*", { windows = false }))
		end)

		itFIXME("should work with file extensions", function()
			assert(isMatch("a.txt", "a*.txt"))
			assert(not isMatch("a\\b.txt", "a*.txt"))
			assert(not isMatch("a\\x\\y.txt", "a*.txt"))
			assert(not isMatch("a\\x\\y\\z", "a*.txt"))
			assert(isMatch("a.txt", "a.txt"))
			assert(not isMatch("a\\b.txt", "a.txt"))
			assert(not isMatch("a\\x\\y.txt", "a.txt"))
			assert(not isMatch("a\\x\\y\\z", "a.txt"))
			assert(not isMatch("a.txt", "a/**/*.txt"))
			assert(isMatch("a\\b.txt", "a/**/*.txt"))
			assert(isMatch("a\\x\\y.txt", "a/**/*.txt"))
			assert(not isMatch("a\\x\\y\\z", "a/**/*.txt"))
			assert(not isMatch("a.txt", "a/**/*.txt", { windows = false }))
			assert(not isMatch("a\\b.txt", "a/**/*.txt", { windows = false }))
			assert(not isMatch("a\\x\\y.txt", "a/**/*.txt", { windows = false }))
			assert(not isMatch("a\\x\\y\\z", "a/**/*.txt", { windows = false }))
			assert(not isMatch("a.txt", "a/*.txt"))
			assert(isMatch("a\\b.txt", "a/*.txt"))
			assert(not isMatch("a\\x\\y.txt", "a/*.txt"))
			assert(not isMatch("a\\x\\y\\z", "a/*.txt"))
			assert(not isMatch("a.txt", "a/*.txt", { windows = false }))
			assert(not isMatch("a\\b.txt", "a/*.txt", { windows = false }))
			assert(not isMatch("a\\x\\y.txt", "a/*.txt", { windows = false }))
			assert(not isMatch("a\\x\\y\\z", "a/*.txt", { windows = false }))
			assert(not isMatch("a.txt", "a/*/*.txt"))
			assert(not isMatch("a\\b.txt", "a/*/*.txt"))
			assert(isMatch("a\\x\\y.txt", "a/*/*.txt"))
			assert(not isMatch("a\\x\\y\\z", "a/*/*.txt"))
			assert(not isMatch("a.txt", "a/*/*.txt", { windows = false }))
			assert(not isMatch("a\\b.txt", "a/*/*.txt", { windows = false }))
			assert(not isMatch("a\\x\\y.txt", "a/*/*.txt", { windows = false }))
			assert(not isMatch("a\\x\\y\\z", "a/*/*.txt", { windows = false }))
		end)

		itFIXME("should support negation patterns", function()
			assert(isMatch("a", "!a/b"))
			assert(isMatch("a\\a", "!a/b"))
			assert(not isMatch("a\\b", "!a/b"))
			assert(isMatch("a\\c", "!a/b"))
			assert(isMatch("b\\a", "!a/b"))
			assert(isMatch("b\\b", "!a/b"))
			assert(isMatch("b\\c", "!a/b"))
			assert(isMatch("a", "!*/c"))
			assert(isMatch("a\\a", "!*/c"))
			assert(isMatch("a\\b", "!*/c"))
			assert(not isMatch("a\\c", "!*/c"))
			assert(isMatch("b\\a", "!*/c"))
			assert(isMatch("b\\b", "!*/c"))
			assert(not isMatch("b\\c", "!*/c"))
			assert(isMatch("a", "!a/b"))
			assert(isMatch("a\\a", "!a/b"))
			assert(not isMatch("a\\b", "!a/b"))
			assert(isMatch("a\\c", "!a/b"))
			assert(isMatch("b\\a", "!a/b"))
			assert(isMatch("b\\b", "!a/b"))
			assert(isMatch("b\\c", "!a/b"))
			assert(isMatch("a", "!*/c"))
			assert(isMatch("a\\a", "!*/c"))
			assert(isMatch("a\\b", "!*/c"))
			assert(not isMatch("a\\c", "!*/c"))
			assert(isMatch("b\\a", "!*/c"))
			assert(isMatch("b\\b", "!*/c"))
			assert(not isMatch("b\\c", "!*/c"))
			assert(isMatch("a", "!a/(b)"))
			assert(isMatch("a\\a", "!a/(b)"))
			assert(not isMatch("a\\b", "!a/(b)"))
			assert(isMatch("a\\c", "!a/(b)"))
			assert(isMatch("b\\a", "!a/(b)"))
			assert(isMatch("b\\b", "!a/(b)"))
			assert(isMatch("b\\c", "!a/(b)"))
			assert(isMatch("a", "!(a/b)"))
			assert(isMatch("a\\a", "!(a/b)"))
			assert(not isMatch("a\\b", "!(a/b)"))
			assert(isMatch("a\\c", "!(a/b)"))
			assert(isMatch("b\\a", "!(a/b)"))
			assert(isMatch("b\\b", "!(a/b)"))
			assert(isMatch("b\\c", "!(a/b)"))
		end)
	end)
end
